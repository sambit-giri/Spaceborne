cosmology:
    Om: 0.32        # Type: float
    Ob: 0.05        # Type: float
    wz: -1.0        # Type: float
    wa: 0.0         # Type: float
    h: 0.6737       # Type: float
    ns: 0.966       # Type: float
    s8: 0.816       # Type: float
    ODE: 0.68       # Type: float
    m_nu: 0.06      # Type: float
    N_eff: 3.046    # Type: float
    Om_k0: 0        # Type: float

intrinsic_alignment:
    Aia: 0.16       # Type: float
    eIA: 1.66       # Type: float
    bIA: 0.0        # Type: float
    CIA: 0.0134     # Type: float
    z_pivot_IA: 0   # Type: float
    lumin_ratio_filename: null  # Type: str | None. null if not used, otherwise path to the file (e.g. ./input/scaledmeanlum-E2Sa.dat)

# extra parameters to be passed to CCL cosmo object, eg CAMB extra parameters
# (see https://ccl.readthedocs.io/en/latest/api/pyccl.cosmology.html#pyccl.cosmology.Cosmology
# for the different options)
extra_parameters:
    camb:
        halofit_version: mead2020_feedback # Type: str
        kmax: 100 # Type: float | int
        HMCode_logT_AGN: 7.75 # Type: float
        num_massive_neutrinos: 1 # Type: int
        dark_energy_model: ppf # Type: str

# Halo model configuration using CCL classes (https://ccl.readthedocs.io/en/latest/api/pyccl.halos.html)
# Each parameter maps directly to a CCL class, and has exactly its name
halo_model:
    mass_def: MassDef200m # Type: str
    concentration: ConcentrationDuffy08 # Type: str
    mass_function: MassFuncTinker10 # Type: str
    halo_bias: HaloBiasTinker10 # Type: str
    halo_profile_dm: HaloProfileNFW # Type: str
    halo_profile_hod: HaloProfileHOD # Type: str

C_ell:
    # Whether or not to read user-provided Cls for the computation of the Gaussian covariance.
    # Note: if the non-Gaussian covariance is requested, the code will compute intermediate quantities
    # such as the radial kernels for lensing and clustering. The user should make sure that the cosmology 
    # The Cls are then splined along the \ell axis and interpolated over the \ell values specified in the "ell_binning"
    # section of this cfg file.
    use_input_cls: False  # Type: bool

    cl_LL_path: ./input/cl_ll.txt # Type: str. Path to the shear-shear angular PS. 
    cl_GL_path: ./input/cl_gl.txt # Type: str. Path to the galaxy-shear angular PS. 
    cl_GG_path: ./input/cl_gg.txt # Type: str. Path to the galaxy-galaxy angular PS. 

    # Which galaxy and magnification bias to use. Options:
    # - 'from_input': read the bias from the files specified in 'gal_bias_table_filename' and 'mag_bias_table_filename'.
    # - 'FS2_polynomial_fit': use the third-order polynomial fits to the galaxy and magnification bias from Flagship 2.
    #                         The actual values of these coefficients can be changed by modifying the values of 
    #                         'galaxy_bias_fit_coeff' and 'magnification_bias_fit_coeff'.
    which_gal_bias: "FS2_polynomial_fit" # Type: str.  # TODO change to "polynomial"
    which_mag_bias: "FS2_polynomial_fit" # Type: str.
    
    # Coefficients of the third-order polynomial galaxy and magnification bias
    galaxy_bias_fit_coeff: [1.33291, -0.72414, 1.0183, -0.14913] # Type: list[float]
    magnification_bias_fit_coeff: [-1.50685, 1.35034, 0.08321, 0.04279] # Type: list[float]

    # Input files for the galaxy and magnification bias. Should have shape (nz_points, zbins + 1), and sufficient
    # redshift support. These files are only used if `which_gal_bias` or `which_mag_bias` are set to 'from_input'.
    gal_bias_table_filename: ./input/gal_bias.txt # Type: str
    mag_bias_table_filename: ./input/mag_bias.txt # Type: str
    
    # Multiplicative shear bias per redshift bin
    mult_shear_bias: [0.0, 0.0, 0.0] # Type: list[float]

    # Boolean flags for redshift-space distortions, intrinsic alignment and magnification bias
    has_rsd: False # Type: bool. Enable/disable redshift-space distortions.
    has_IA: True # Type: bool. Enable/disable intrinsic alignment.
    has_magnification_bias: True # Type: bool. Enable/disable magnification bias.

    # Keyword arguments for CCL Cl calculation (excluding `p_of_k_a`), described in
    # https://ccl.readthedocs.io/en/latest/api/pyccl.cosmology.html#pyccl.cosmology.Cosmology.angular_cl
    cl_CCL_kwargs:
        l_limber: -1 # Type: int
        limber_integration_method: spline # Type: str
        non_limber_integration_method: FKEM # Type: str

nz:
    # Paths to source (for WL) and lens (for GCph) redshift distributions.
    # These must have shape (z_points, zbins + 1)
    nz_sources_filename: ./input/nzTab-EP03-zedMin02-zedMax25-mag245.dat
    nz_lenses_filename: ./input/nzTab-EP03-zedMin02-zedMax25-mag245.dat

    # Number of galaxies per arcmin**2 for each redshift bin. 
    # Should be of len(zbins)
    ngal_sources: [8.09216, 8.09215, 8.09215]  # Type: list[float]
    ngal_lenses: [8.09216, 8.09215, 8.09215]  # Type: list[float]

mask:
    load_mask: False # Type: bool. Whether to load the mask from a fits or npy file
    mask_path: ../input/mask.fits # Type: str. Path to the mask file (.FITS or .npy)
    generate_polar_cap: True # Type: bool. Whether to generate a polar cap mask on the fly.
    nside: 1024 # Type: int
    survey_area_deg2: 13245 # Type: int
    apodize: False # Type: bool
    aposize: 0.1 # Type: float. Apodization scale in deg

namaster:
    use_namaster: False # Type: bool. Whether to use Namaster to compute the partial-sky Gaussian covariance
    coupled_cov: False # Type: bool. Whether to compute the (Gaussian) covariance of the coupled or decoupled Cls
    spin0: False # Type: bool. Whether to approximate the shear field as a spin-0 field (faster but less accurate)
    use_INKA: True # Type: bool. Whether to use the improved Narrow Kernel Approximation
    workspace_path: ... # Type: str. Path to the workspace, if already computed

ell_binning:
    binning_type: 'ref_cut'  # Type: str. Options: ['log', 'lin', 'unbinned', 'ref_cut']
    
    ell_min_WL: 10 # Type: int. Minimum ell for WL
    ell_max_WL: 3000 # Type: int. Maximum ell for WL
    ell_bins_WL: 29 # Type: int. Number of bins for WL. Not used in the 'unbinned' and 'ref_cut' cases
    
    ell_min_GC: 10 # Type: int. Minimum ell for GC
    ell_max_GC: 3000 # Type: int. Maximum ell for GC
    ell_bins_GC: 29 # Type: int. Number of bins for GC. Not used in the 'unbinned' and 'ref_cut' cases

    ell_min_ref: 10 # Type: int. Minimum ell for reference case
    ell_max_ref: 5000 # Type: int. Maximum ell for reference case
    ell_bins_ref: 32 # Type: int. Number of bins for reference case

BNT:
    cl_BNT_transform: False # Type: bool
    cov_BNT_transform: False # Type: bool

covariance:
    G: True # Type: bool. Enable/disable the Gaussian covariance term.
    SSC: True # Type: bool. Enable/disable the super-sample covariance (SSC) term
    cNG: True # Type: bool. Enable/disable the connected non-Gaussian (cNG) covariance term

    # Choose whether to use the upper ('triu') or lower ('tril') triangle
    # of the auto-probe (LL, GG) zbins (C_{ij}(\ell)^AA = C_{ji}(\ell)^AA).
    triu_tril: triu # Type: str. Options: ['triu', 'tril']
    
    # Within the upper or lower triangle, count indices in
    # a row-major or column-major order.
    row_col_major: row-major # Type: str. Options: ['row-major', 'column-major']
    
    # ordering of the different 3x2pt probes in the covariance matrix
    probe_ordering: [["L", "L"], ["G", "L"], ["G", "G"]] # Type: list[list[str]]
    
    # Determines the ordering of the covariance matrix in 2D, with the outermost 
    # loop corresponding to the leftmost index.
    # Options: [ell_probe_zpair, probe_ell_zpair, probe_zpair_ell, zpair_probe_ell]
    # Examples:
    # - ell_probe_zpair: Ordered by multipole (ell), then probe type, then redshift pair.
    # - probe_ell_zpair: Ordered by probe type, then multipole (ell), then redshift pair. This is the ordering used by CLOE
    covariance_ordering_2D: ell_probe_zpair # Type: str.
    
    # Whether to save the full 6D covariance matrix, without to any indices compression or reshaping. 
    # In the case of the single probes, this is an array of shape
    # (ellbins, ellbins, zbins, zbins, zbins, zbins).
    save_full_cov: True # Type: bool
    
    # Whether to split the Gaussian covariance term into the
    # sample variance, noise and mixed terms
    split_gaussian_cov: False # Type: bool

    # TODO make sigma_eps_i a vector
    # Ellipticity dispersion *per component* = sigma_eps_i.
    # total ellipticity dispersion = sigma_eps
    # sigma_eps = (sigma_eps_i * np.sqrt(2))
    sigma_eps_i: 0.26 # Type: float
    
    # Whether to include the noise power spectra in the computation of the 
    # Gaussian covariance matrix.
    noiseless_spectra: False # Type: bool

    # Sigma2_b settings, common to Spaceborne and PyCCL. Can be one of:
    # - full_curved_sky: Use the full- (curved-) sky expression (for Spaceborne only). In this case, the output covmat
    # - from_input_mask: input a mask with path specified by mask_path
    # - polar_cap_on_the_fly: generate a polar cap during the run, with nside specified by nside
    # - null (None): use the flat-sky expression (valid for PyCCL only)
    # - flat_sky: use the flat-sky expression (valid for PyCCL only)
    #   has to be rescaled by fsky
    which_sigma2_b: polar_cap_on_the_fly # Type: str | None

    # TODO SU input file
    which_pk_responses: halo_model # Type: str. Options: ['halo_model', 'separate_universe']

    # Which first-order galaxy bias to use in the computation of the counterterms for the gm and gg responses.
    # Can be one of:
    # - 'from_HOD' (from the Halo Occupation Distribution previously initialized)
    # - 'from_input' (from the input tabulated galaxy bias values)/FS2 fit computed in SB
    # TODO probably the FS2 fit option can be deleted altogether
    # TODO use the HOD bias in the whole code
    which_b1g_in_resp: from_HOD # Type: str. Options: ['from_HOD', 'from_input']

    # Whether or not to include the second-order galaxy bias in the GCph SU responses
    include_b2g: True # Type: bool
    
    # Whether or not to include the additional terms of Terasawa et al [arXiv:2310.13330] in the halo model responses
    include_terasawa_terms: False # Type: bool

    # Integration scheme used for the sigma2_b computation. Options:
    # - 'simps': uses simpson integration. This is faster but less accurate
    # - 'levin': uses levin integration. This is slower but more accurate
    sigma2_b_integration_scheme: levin # Type: str. 
    load_cached_sigma2_b: False # Type: bool. Whether to load the previously computed sigma2_b.
    
    # k grid used for power spectrum and trispectrum computation
    log10_k_min: -5  # Type: float 
    log10_k_max: 2  # Type: float
    k_steps: 20  # Type: int. Around 100 should be enough
    
    z_min: 0.02 # Type: float. SU responses' kmax allow for z_min = 0.016, at most.
    z_max: 3.0 # Type: float
    z_steps: 200 # Type: int. Number of z steps used for the NG covariance projection. Should be quite high, e.g. 7000
    z_steps_trisp: 10  # Type: int. Number of z steps used to compute the trispectrum - around 50 should be enough

    use_KE_approximation: False # Type: bool. Whether or not to use the single-redshift integral approximation for the SSC

    # Name of the output covariance file. Change to '.npy' to save as npy file.
    cov_filename: cov_{which_ng_cov:s}_{probe:s}_{ndim}.npz # Type: str. 

PyCCL:
    # (from CCL docs): integration method to be used for the Limber integrals.
    # Options:
    # - 'qag_quad' (GSL's qag method backed up by quad when it fails)
    # - 'spline' (the integrand is splined and then integrated analytically).
    # DSnote: note that the former could give errors.
    cov_integration_method: spline # Type: str

    # Whether or not to load the previously computed trispectrum.
    load_cached_tkka: True # Type: bool.

    # Whether or not to use the default k and a grids used in CCL. 
    # Setting this to True will make the computation of the cNG trispectrum much slower.
    use_default_k_a_grids: False

    # (from CCL docs): number of points over which to compute the radial kernels (weight functions).
    # See e.g. documentation of https://ccl.readthedocs.io/en/latest/api/pyccl.tracers.html#pyccl.tracers.NumberCountsTracer
    n_samples_wf: 1000 # Type: int

    # precision parameters for splines and numerical integration, described in
    # https://ccl.readthedocs.io/en/latest/source/notation_and_other_cosmological_conventions.html#controlling-splines-and-numerical-accuracy.
    spline_params: # Type: dict | None
        A_SPLINE_NA_PK: 240 # Type: int
        K_MAX_SPLINE: 300 # Type: int
    gsl_params: null # Type: dict | None

misc:
    num_threads: 8 # Type: int. How many threads to use for the parallel computations

    # How many integrals to compute at once for the  numerical integration of
    # the sigma^2_b(z_1, z_2) function with pylevin. 
    # IMPORTANT NOTE: in case of memory issues, (i.e., if you notice the code crashing
    # while computing sigma2_b), decrease this or num_threads.
    levin_batch_size: 1000 # Type: int. 

    # some sanity checks on the covariance matrix. These could take a while to run.
    test_numpy_inversion: False # Type: bool. Test for errors in np.linalg.inv
    test_condition_number: False # Type: bool. Check if condition number is above 1e10
    test_cholesky_decomposition: False # Type: bool. Test if cholesky decomposition fails
    test_symmetry: False # Type: bool. Test if covariance matrix is symmetric (cov = cov.T)

    output_path: ./output # Type: str. Path to the output directory
